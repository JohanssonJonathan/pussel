{"version":3,"sources":["clickableValues.js","Number.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["getPossibleNumbersToClick","numbers","possibleNumbersToClick","map","nr","i","index","leftOrRightPosition","Number","_ref","clickableNumber","onClick","react_default","a","createElement","className","style","backgroundColor","color","length","Button","children","App","state","correctNumbers","currentNumbers","shuffle","shuffleDone","startShuffle","value","shuffled","_this","sort","Math","random","b","setState","setNewPossibleNumbersToClick","pressedCorrectNr","filter","newNumbers","this","_this2","_this$state","isEqual","CSSTransition","in","classNames","timeout","onEntered","transform","item","src_Number","key","src_Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.714aa546.chunk.js","sourcesContent":["\nconst getPossibleNumbersToClick =(numbers)=>{\n\n    let possibleNumbersToClick = [];\n    numbers.map((nr, i) => {\n      if (nr === null) {\n        const index = i + 1;\n        const leftOrRightPosition = index % 4;\n        if (leftOrRightPosition < 2) {\n          if (leftOrRightPosition === 1) {\n            //Left side\n            if (index < 2) {\n              //Up on the left side\n              possibleNumbersToClick = [numbers[index], numbers[index + 3]];\n            } else if (index > 12) {\n              //Down left side\n              possibleNumbersToClick = [numbers[index], numbers[index - 5]];\n            } else {\n              // Middle of left side\n              possibleNumbersToClick = [\n                numbers[index],\n                numbers[index - 5],\n                numbers[index + 3]\n              ];\n            }\n          } else {\n            //Right side\n            if (index < 5) {\n              //Up on the right side\n              possibleNumbersToClick = [numbers[index - 2], numbers[index + 3]];\n            } else if (index > 12) {\n              //Down on the right side\n              possibleNumbersToClick = [numbers[index - 2], numbers[index - 5]];\n            } else {\n              //Middle of right side\n              possibleNumbersToClick = [\n                numbers[index - 2],\n                numbers[index - 5],\n                numbers[index + 3]\n              ];\n            }\n          }\n        } else {\n          //In the middle\n          if (index > 13) {\n            // Bottom side\n            possibleNumbersToClick = [\n              numbers[index - 2],\n              numbers[index - 5],\n              numbers[index]\n            ];\n          } else if (index < 4) {\n            // Top side\n            possibleNumbersToClick = [\n              numbers[index],\n              numbers[index - 2],\n              numbers[index + 3]\n            ];\n          } else {\n            //Center\n            possibleNumbersToClick = [\n              numbers[index + 3],\n              numbers[index - 5],\n              numbers[index - 2],\n              numbers[index]\n            ];\n          }\n        }\n      }\n    });\n    return possibleNumbersToClick\n}\n\nexport default getPossibleNumbersToClick\n\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Number = ({\n  nr,\n  clickableNumber,\nonClick\n}) => {\n    return(\n  <div\n    className=\"cell\"\n    style={{\n      backgroundColor: nr === null ? \"#f3d7ca\" : \"#393e46\",\n      color:\n        clickableNumber.length > 0 ? \"rgba(255,255,255,0.9)\" : \"rgba(255,255,255,0.5)\"\n    }}\n    onClick={onClick}\n  >\n    {nr}\n  </div>\n)};\n\nexport default Number;\n","import React from \"react\";\nimport \"./App.css\";\n\n\nconst Button = ({onClick, children}) => (\n  <h4 className=\"shuffle\" onClick={onClick}>\n    {children}\n  </h4>\n);\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport getPossibleNumbersToClick from \"./clickableValues\";\nimport Number from \"./Number\";\nimport Button from \"./Button\";\nimport { CSSTransition } from \"react-transition-group\";\n\nclass App extends Component {\n  state = {\n    correctNumbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null],\n    currentNumbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null],\n    possibleNumbersToClick: [],\n    shuffle: false,\n    shuffleDone: false\n  };\n\n  startShuffle = value => {\n    let shuffled = this.state.currentNumbers\n      .map(a => ({ sort: Math.random(), value: a }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(a => a.value);\n\n    this.setState({\n      shuffle: value && true,\n      currentNumbers: value ? this.state.currentNumbers : shuffled\n    });\n  };\n\n  componentDidMount() {\n    this.startShuffle();\n  }\n\n  setNewPossibleNumbersToClick = (i, possibleNumbersToClick) => {\n    const { currentNumbers } = this.state;\n\n    const pressedCorrectNr = possibleNumbersToClick.filter(\n      nr => currentNumbers[i] === nr\n    );\n    if (pressedCorrectNr.length > 0) {\n      const newNumbers = currentNumbers.map(nr => {\n        if (nr === null) {\n          return pressedCorrectNr[0];\n        } else if (pressedCorrectNr[0] === nr) {\n          return null;\n        } else {\n          return nr;\n        }\n      });\n\n      this.setState({\n        currentNumbers: newNumbers\n      });\n    }\n  };\n\n  componentDidUpdate() {\n    if (this.state.shuffleDone) {\n      this.startShuffle();\n      this.setState({ shuffleDone: false });\n    }\n  }\n  render() {\n    const { currentNumbers, shuffle, shuffleDone, correctNumbers } = this.state;\n    const isEqual = currentNumbers.filter((nr, i) => nr === correctNumbers[i]);\n\n    return (\n      <div>\n        <CSSTransition\n          in={shuffle}\n          classNames=\"main-container\"\n          timeout={200}\n          onEntered={() => this.setState({ shuffleDone: !shuffleDone })}\n        >\n          <div\n            className=\"main-container\"\n            style={{ transform: shuffle ? \"rotateY(180deg)\" : \"rotateY(0deg)\" }}\n          >\n            {currentNumbers.map((nr, i) => {\n              const clickableNumber = getPossibleNumbersToClick(currentNumbers).filter(\n                item => nr === item\n              );\n\n              return (\n                <Number\n                  nr={nr}\n                  clickableNumber={clickableNumber}\n                  key={i}\n                  onClick={() =>\n                    this.setNewPossibleNumbersToClick(\n                      i,\n                      getPossibleNumbersToClick(currentNumbers)\n                    )\n                  }\n                />\n              );\n            })}\n          </div>\n        </CSSTransition>\n\n        <div className=\"shuffle-container\">\n          <Button onClick={() => this.startShuffle(true)}>Shuffle</Button>\n          {isEqual.length === 16 && (\n            <h4 className=\"finished\">Congratulations you made it!</h4>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}